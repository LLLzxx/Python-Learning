# 声音 -- pygame.mixer
# 波形文件 -- hello.wav
# MP3文件 -- hello.mp3
# WMA文件 -- hello.wma
# Ogg Vorbis文件 -- hello.ogg
import pygame,sys
pygame.init()
screen = pygame.display.set_mode([640,480])

pygame.mixer.music.load("bg_music.mp3")
# 设置音量
pygame.mixer.music.set_volume(0.30)
pygame.mixer.music.play()

splat = pygame.mixer.Sound("splat.wav")
splat.set_volume(0.5)

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # 检查歌曲是否播放完毕
    if not pygame.mixer.music.get_busy():
        # ()里面写数字可以控制总共的播放次数
        # 如果是负数，则会播放无数次
        splat.play(3)
        pygame.time.delay(1000)
        running = False
pygame.quit




import pygame,sys

class Ball(pygame.sprite.Sprite):
    def __init__(self,image_file,speed,location):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(image_file)
        self.rect = self.image.get_rect()
        self.rect.left , self.rect.top = location
        self.speed = speed

    def move(self):
        # 命名空间 -- 把下面的变量变成全局
        global score,score_surf,score_font
        self.rect = self.rect.move(self.speed)
        # 在窗口左右反弹
        if self.rect.left < 0 or self.rect.right > screen.get_width():
            self.speed[0] = -self.speed[0]
            # 碰到左右边界的声音
            if self.rect.top < screen.get_height():
                hit_wall.play()
        # 碰到上界反弹
        if self.rect.top <= 0:
            self.speed[1] = -self.speed[1]
            score += 1
            score_surf = score_font.render(str(score),1,(0,0,0))
            # 碰到上界反弹（得分)的声音
            get_point.play()

class Paddle(pygame.sprite.Sprite):
    def __init__(self,location = [0,0]):
        pygame.sprite.Sprite.__init__(self)
        # 为球拍创建表面
        image_surface = pygame.surface.Surface([100,20])
        # 用 黑色 去填充表面
        image_surface.fill([0,0,0])
        # 每个 动画精灵 都需要 image属性，
        # 用 surface.convert() 方法把表面转换为图像
        self.image = image_surface.convert()
        self.rect = self.image.get_rect()
        self.rect.left , self.rect.top = location

# 初始化
pygame.init()
pygame.mixer.init()

#加载各类音乐文件 并 设置音量
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1)
hit = pygame.mixer.Sound("hit_paddle.wav")
hit.set_volume(0.4)
new_life = pygame.mixer.Sound("new_life.wav")
new_life.set_volume(0.5)
splat = pygame.mixer.Sound("splat.wav")
splat.set_volume(0.6)
hit_wall = pygame.mixer.Sound("hit_wall.wav")
hit_wall.set_volume(0.4)
get_point = pygame.mixer.Sound("get_point.wav")
get_point.set_volume(0.2)
bye = pygame.mixer.Sound("game_over.wav")
bye.set_volume(0.6)

screen = pygame.display.set_mode([640,480])
clock = pygame.time.Clock()
# 赋予 球图像，速度，起始位置
myBall = Ball('wackyball.bmp',[12,6],[50,50])
# 为之后 球 与 球拍 的碰撞做准备
ballGroup = pygame.sprite.Group(myBall)
paddle = Paddle([270,400])
lives = 3
score = 0
# 显示玩家分数的方法 -- font模块
# 创建字体对象，None：默认字体样式
score_font = pygame.font.Font(None,50)
# 渲染文本到 score_surf 表面
score_surf = score_font.render(str(score),1,(0,0,0))
# 设置文本位置
score_pos = [10,10]
# 鼠标事件
done = False

running = True
while running:
    clock.tick(30)
    screen.fill([255,255,230])
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        # 检测鼠标运动，移动球拍
        elif event.type == pygame.MOUSEMOTION:
            # event.pos[0] -- 表示鼠标 x轴 移动的坐标
            paddle.rect.centerx = event.pos[0]
    # 检查球与球拍之间的碰撞
    if pygame.sprite.spritecollide(paddle,ballGroup,False):
        hit.play()
        myBall.speed[1] = -myBall.speed[1]

    myBall.move()

    if not done:
        screen.blit(myBall.image,myBall.rect)
        screen.blit(paddle.image,paddle.rect)
        screen.blit(score_surf,score_pos)
        for i in range(lives):
            width = screen.get_width()
            # 重置 生命球的位置
            screen.blit(myBall.image,[width - 40*i,20])
        pygame.display.flip()
    # screen 是表面，其中不包含 rect 属性，
    # 但可以用 get_rect() 得到一个包含函数表面的 rect 对象
    if myBall.rect.top >= screen.get_rect().bottom:
        if not done:
            splat.play()
        lives -= 1
        if lives <= 0:
            if not done:
                pygame.time.delay(1000)
                bye.play()
            final_text1 = "Game Over"
            final_text2 = "Your final score is:" + str(score)
            ft1_font = pygame.font.Font(None,70)
            ft1_surf = ft1_font.render(final_text1, 1, (0, 0, 0))
            ft2_font = pygame.font.Font(None,50)
            ft2_surf = ft2_font.render(final_text2, 1, (0, 0, 0))
            # 将文本在窗口居中
            screen.blit(ft1_surf,[screen.get_width()//2 -\
                        ft1_surf.get_width()//2, 100])
            screen.blit(ft2_surf, [screen.get_width() // 2 - \
                        ft2_surf.get_width()//2, 200])
            pygame.display.flip()
            done = True
            # 音乐淡出
            pygame.mixer.music.fadeout(2000)
        else:
            pygame.time.delay(2000)
            new_life.play()
            myBall.rect.topleft = [50,50] #[screen.get_rect().width - 40*lives,20]
            # screen.blit(myBall.image,myBall.rect)
            # pygame.display.flip()
            # pygame.time.delay(1000)
pygame.quit




# PyQt模块中的一切窗口都是对象，需要用 class 来定义
import sys
# 导入需要的 PyQt库
from PyQt5 import QtWidgets,uic
# 加载在 Qt Designer 中创建的用户界面
# uic.loadUiType()方法返回的是一个列表，其中包含form_class 和 base_class 两个元素
# [0] 相当于 item[0] -- form_class
form_class = uic.loadUiType("My First GUI.ui")[0]
# 为主窗口定义一个类
class MyFirstWindow(QtWidgets.QMainWindow,form_class):
    def __init__(self, parent = None):
        QtWidgets.QMainWindow.__init__(self,parent)
        self.setupUi(self)
        #将 事件处理器 与 事件 关联起来
        self.pushButton.clicked.connect(self.button_clicked)
    # 事件处理器
    def button_clicked(self):
        x = self.pushButton.x()
        y = self.pushButton.y()
        x += 50
        y += 50
        self.pushButton.move(x,y)

# 运行事件循环的 PyQt 对象
app = QtWidgets.QApplication(sys.argv)
myWindow = MyFirstWindow()
# 启动程序并显示 GUI 窗口
myWindow.show()
app.exec_()
