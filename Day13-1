# 一个程序包括三个方面：输入、处理、输出
# 文件的输入输出
# 计算机按照二进制来存储信息，只用 1 / 0 （ 1bit )  8bit = 1byte ，
# 文件就是带名字的字节集合
# 文件存储：可以存储在硬盘、CD、DVD、闪存驱动器 或 其他存储介质上
# 文件属性：1.名字  2.类型：表明文件包含什么类型的数据（图片、声音、文本）
#         3.位置（存储文件的地方）  4.大小（文件包含的字节数）

# 文件名
# 自取名字+.+文件扩展名
# 文件分类 与 扩展名--文本文件（.txt）
#           二进制文件（binary file）： 声音文件（.mp3）  可执行文件（.exe）  Python文件（.py）

# 文件位置
# 文件路径（file path）
# 文件夹（folder） 或 目录（directory） 是硬盘和其他存储介质的组织形式
# 子文件夹（subfolder） 子目录（subdirectory）
# 表示下一级的文件最好用 /
# 如果文件已经在工作目录下，那无需指定文件路径就可以找到这个文件，如--
my_sound = pygame.mixer.Sound("splat.wav")


# 打开文件 -- 在 Python 中创建对象
#文件对象          文件名   完成读文件的操作
my_file = open('notes.txt','r')
# 该内置函数会读取整个文本，并创建一个列表，每个 文本行 都会成为列表中的一项
lines = my_file.readlines()
print(lines)
my_file.close()
# Wash the car
# Make my bed
# Collect allowance
# ['Wash the car\n', 'Make my bed\n', 'Collect allowance']


my_file = open('notes.txt','r')
# 多次使用 readline() 方法 -- 一次读一行 （少了 -s )
first_line = my_file.readline()
second_line = my_file.readline()
print("first line = ",first_line)
print("second line =",second_line)

# 回到起始位置 -- (0)就是回到起始位置
my_file.seek(0)
first_line_again = my_file.readline()
print("first line again =",first_line_again)
# 如果只是打开而没有关闭，当另一个程序也需要使用这个文件时，就无法访问了
my_file.close()
# first line =  Wash the car
#
# second line = Make my bed
#
# first line again = Wash the car


# 写文件时，文件模式用 'w' -- 原本文件的内容会被删除掉 -- 不想删除可用 追加
My_file = open('notes.txt','w')
My_file.write('Eat supper\n')
My_file.write('Play socer\n')
My_file.write('Go to bed')
print(My_file)
My_file.close()

# 也可以用 print() 的方法来写文件
My_File = open("new_file.txt",'a')
print("Hello there, neighbor!",file = My_File)
My_File.close()


# 追加文件内容时，文件模式用 'a' -- 即使不存在也可以打开这个文件，相当于新建了一个文件
todo_list = open('note.txt','a')
todo_list.write('\nSpend allowance')
#lines = my_file.readlines()
print(todo_list)
my_file.close()


# 在文件中保存内容：使用 pickle 模块
import pickle
my_list = ['Fred',73,'Hello there',81.9876e-13]
# 'w'模式 是因为我们要在文件中保存一些内容 'b'是告诉 Python 我们存储的是二进制数据
pickle_file = open('my_pickled_list.pkl','wb')
# 用 dump函数 把 my_list 放入 pickle_file 中
pickle.dump(my_list,pickle_file)
pickle_file.close()

# 还原对象 -- load()
import pickle
pickle_file = open('my_pickled_list.pkl','rb')
recovered_list = pickle.load(pickle_file)
pickle_file.close()
print(recovered_list)
# ['Fred', 73, 'Hello there', 8.19876e-12]
